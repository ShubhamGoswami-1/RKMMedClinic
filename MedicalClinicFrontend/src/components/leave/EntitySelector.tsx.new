import React, { useEffect, useState } from 'react';
import { useAppDispatch, useAppSelector } from '../../hooks/redux';
import { fetchAllStaff } from '../../store/slices/staffSlice';
import { fetchAllDoctors } from '../../store/slices/doctorsSlice';

export type EntityType = 'staff' | 'doctor';

interface EntitySelectorProps {
  entityType: EntityType;
  onEntityTypeChange: (type: EntityType) => void;
  selectedEntityId: string;
  onEntitySelect: (id: string) => void;
}

const EntitySelector: React.FC<EntitySelectorProps> = ({
  entityType,
  onEntityTypeChange,
  selectedEntityId,
  onEntitySelect
}) => {
  const dispatch = useAppDispatch();
  const [searchTerm, setSearchTerm] = useState('');
  
  const { staff } = useAppSelector((state) => state.staff);
  const { doctors } = useAppSelector((state) => state.doctors);
  
  useEffect(() => {
    if (entityType === 'staff' && staff.length === 0) {
      dispatch(fetchAllStaff({ status: 'active' }));
    } else if (entityType === 'doctor' && doctors.length === 0) {
      dispatch(fetchAllDoctors({ status: 'active' }));
    }
  }, [dispatch, entityType, staff.length, doctors.length]);
  
  const filteredStaff = staff.filter(
    (s) =>
      s.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      s.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      s.email.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  const filteredDoctors = doctors.filter(
    (d) =>
      d.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      d.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      d.email.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  return (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Select Leave Request For
        </label>
        <div className="flex space-x-4">
          <label className="inline-flex items-center">
            <input
              type="radio"
              name="entityType"
              value="staff"
              checked={entityType === 'staff'}
              onChange={() => onEntityTypeChange('staff')}
              className="h-4 w-4 text-orange-600 focus:ring-orange-500"
            />
            <span className="ml-2 text-sm text-gray-700">Staff</span>
          </label>
          <label className="inline-flex items-center">
            <input
              type="radio"
              name="entityType"
              value="doctor"
              checked={entityType === 'doctor'}
              onChange={() => onEntityTypeChange('doctor')}
              className="h-4 w-4 text-orange-600 focus:ring-orange-500"
            />
            <span className="ml-2 text-sm text-gray-700">Doctor</span>
          </label>
        </div>
      </div>
      
      <div>
        <label htmlFor="entitySearch" className="block text-sm font-medium text-gray-700 mb-2">
          Search {entityType === 'staff' ? 'Staff' : 'Doctor'}
        </label>
        <input
          type="text"
          id="entitySearch"
          className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-orange-500 focus:border-orange-500"
          placeholder={`Search by name or email...`}
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        
        <div className="mt-2">
          <label htmlFor="entitySelect" className="block text-sm font-medium text-gray-700 mb-2">
            Select {entityType === 'staff' ? 'Staff' : 'Doctor'}
          </label>
          <select
            id="entitySelect"
            className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-orange-500 focus:border-orange-500"
            value={selectedEntityId}
            onChange={(e) => onEntitySelect(e.target.value)}
          >
            <option value="">Select {entityType === 'staff' ? 'a staff member' : 'a doctor'}</option>
            {entityType === 'staff' ? (
              filteredStaff.map((s) => (
                <option key={s._id} value={s._id}>
                  {s.firstName} {s.lastName} ({s.email})
                </option>
              ))
            ) : (
              filteredDoctors.map((d) => (
                <option key={d._id} value={d._id}>
                  {d.firstName} {d.lastName} ({d.email})
                </option>
              ))
            )}
          </select>
        </div>
      </div>
    </div>
  );
};

export default EntitySelector;
